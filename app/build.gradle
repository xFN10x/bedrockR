/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

 import org.panteleyev.jpackage.ImageType


plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'org.panteleyev.jpackageplugin' version '1.7.3'
    id("com.gradleup.shadow") version "9.0.0-beta17"
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

javafx {
    version = "21"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

sourceSets {
    main {
        resources {
            srcDirs += ['src/main/java']
            includes = ['**/*.properties', '**/*.png', '**/*.otf']
        }
    }
}



dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
    
    //gson
    implementation 'com.google.code.gson:gson:2.13.1'
    //flat laf
    implementation 'com.formdev:flatlaf:3.6'

    implementation("com.gradleup.shadow:com.gradleup.shadow.gradle.plugin:9.0.0-beta17")

    implementation 'commons-io:commons-io:2.19.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'fn10.bedrockr.Launcher'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

def version = 'a1.0'
def winver = '0.1.0'

def JPackageSettings = { org.panteleyev.jpackage.JPackageTask task ->
    task.dependsOn("build", "shadowJar")

    task.input = layout.buildDirectory.dir("builtJars")
    task.destination = layout.buildDirectory.dir("builtDist")
    task.appVersion = winver

    task.appName = "bedrockR"
    task.vendor = "_FN10_"

    task.mainJar = "bedrockR-${version}-all.jar"
    task.mainClass = "fn10.bedrockr.Launcher"

    task.windows {
        task.type = org.panteleyev.jpackage.ImageType.MSI
        task.winConsole = true
        task.winMenu = true
        task.winShortcutPrompt = true
        task.winPerUserInstall = true
        task.winDirChooser = true
    }
}

tasks.named("jpackage", org.panteleyev.jpackage.JPackageTask) {
    JPackageSettings(delegate)
}

// DEB task
tasks.register("jpackageDEB", org.panteleyev.jpackage.JPackageTask) { task ->
    JPackageSettings(task)

    task.linux {
        type = ImageType.DEB
        linuxPackageName = "bedrockr"
        linuxShortcut = true
    }
}

// RPM task
tasks.register("jpackageRPM", org.panteleyev.jpackage.JPackageTask) { task ->
    JPackageSettings(task)

    task.linux {
        type = ImageType.RPM
        linuxPackageName = "bedrockr"
        linuxShortcut = true
    }
}

tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
  archiveBaseName = 'bedrockR'
  archiveVersion = version
  destinationDirectory = layout.buildDirectory.dir('builtJars')
}

