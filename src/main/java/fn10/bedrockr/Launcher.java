/*
 * This source file was generated by the Gradle 'init' task
 */
package fn10.bedrockr;

import fn10.bedrockr.utils.ErrorShower;
import fn10.bedrockr.utils.RFileOperations;
import fn10.bedrockr.utils.http.Format1Latest;
import fn10.bedrockr.utils.logging.RLogFilter;
import fn10.bedrockr.utils.logging.RLogFormatter;
import fn10.bedrockr.utils.logging.RLogHandler;
import fn10.bedrockr.windows.RLaunchPage;
import fn10.bedrockr.windows.RSplashScreen;
import fn10.bedrockr.windows.laf.BedrockrDark;

import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.*;

import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import com.formdev.flatlaf.FlatLaf;
import com.google.gson.Gson;

public class Launcher {

    public static String VERSION = "a1.2";
    public static int CHECKVERSION = 2;
    public static Image ICON;

    public static List<Image> ICONS = new ArrayList<Image>();

    public static Dimension LAUNCH_WINDOW_SIZE = new Dimension(600, 400);
    public static Logger LOG = Logger.getLogger("bedrockR");

    public static void main(String[] args) {
        String ver = System.getProperty("java.version");
        if (ver.startsWith("1.")) {
            JOptionPane.showConfirmDialog(null, "Woah! This version of java is out of date.\n\nYour version: " + ver
                    + "\n Required version: 21.0.0", "Java error", JOptionPane.ERROR_MESSAGE);
        } else if (Integer.parseInt(ver.substring(0, 2)) < 21) {
            JOptionPane.showConfirmDialog(null, "Woah! This version of java is out of date.\n\nYour version: " + ver
                    + "\n Required version: 21.0.0", "Java error", JOptionPane.ERROR_MESSAGE);
        }

        RSplashScreen loading = new RSplashScreen();

        try {
            ICON = ImageIO.read(Launcher.class
                    .getResourceAsStream("/ui/Icon_huge.png"));
            // ICONS = new Image[] {
            ICONS.add(ImageIO.read(Launcher.class
                    .getResourceAsStream("/ui/Icon_16.png")));
            ICONS.add(ImageIO.read(Launcher.class
                    .getResourceAsStream("/ui/Icon_27.png")));
            ICONS.add(ImageIO.read(Launcher.class
                    .getResourceAsStream("/ui/Icon_32.png")));
            ICONS.add(ImageIO.read(Launcher.class
                    .getResourceAsStream("/ui/Icon_64.png")));
            ICONS.add(ImageIO.read(Launcher.class
                    .getResourceAsStream("/ui/Icon_128.png")));
            ICONS.add(ImageIO.read(Launcher.class
                    .getResourceAsStream("/ui/Icon_256.png")));
            ICONS.add(ImageIO.read(Launcher.class
                    .getResourceAsStream("/ui/Icon_huge.png")));
            // };
        } catch (Exception e) {
            e.printStackTrace();
            ErrorShower.showError(null, "Failed to load icon(s)", "IO Error", e);
        }

        // set up logging
        String logloc = RFileOperations.getBaseDirectory(null, File.separator + "logs").getAbsolutePath()
                + File.separator + "bedrockR-log-"
                + System.currentTimeMillis() + ".log";

        for (var h : LOG.getHandlers()) {
            LOG.removeHandler(h);
            h.close();
        }
        LOG.setUseParentHandlers(false);
        LOG.setLevel(Level.FINE);
        LOG.addHandler(new RLogHandler());

        // try to add file handler
        try {
            Handler fileHandler = new FileHandler(logloc, 2000, 1, true);
            fileHandler.setFormatter(new RLogFormatter());
            fileHandler.setFilter(new RLogFilter());
            LOG.addHandler(fileHandler);
        } catch (SecurityException | IOException e) {
            e.printStackTrace();
        }

        Runtime.getRuntime().addShutdownHook(new Thread() {
            public void run() {
                for (var h : LOG.getHandlers()) {
                    h.close();
                }
            }
        });

        // log stuff
        LOG.info("Logging to " + logloc);
        LOG.info("Base Path: " + RFileOperations.getBaseDirectory(null).getAbsolutePath());
        LOG.info("Launch Args: " + String.join(",", args));
        LOG.info(MessageFormat.format("bedrockR version: {0}, Java version: {1}, JVM: {2}", VERSION, Runtime.version(),
                System.getProperty("java.vm.name")));

        // setup theme

        FlatLaf.registerCustomDefaultsSource("fn10.bedrockr.windows.laf");

        try {
            GraphicsEnvironment.getLocalGraphicsEnvironment()
                    .registerFont(
                            Font.createFont(Font.TRUETYPE_FONT, Launcher.class.getResourceAsStream("/ui/font.otf")));
            BedrockrDark.setup();
        } catch (Exception e) {
            e.printStackTrace();
            ErrorShower.showError(null, "failed to load theme/font " + e.getMessage(), "FlatLaf Error / Font Error", e);
        }

        // try to see if this version is out of date
        try {
            HttpClient client = HttpClient.newBuilder().build();
            HttpRequest req = HttpRequest.newBuilder()
                    .uri(new URI("https://raw.githubusercontent.com/xFN10x/bedrockR/refs/heads/master/latest.json"))
                    .version(HttpClient.Version.HTTP_2).GET().build();

            HttpResponse<String> response = client.send(req, BodyHandlers.ofString());

            Format1Latest serilized = new Gson().fromJson(response.body(), Format1Latest.class);

            if (serilized.LatestVersion > CHECKVERSION) {
                int op = JOptionPane.showConfirmDialog(loading, serilized.Message,
                        "Version out of date (" + serilized.CurrentStringVersion + " > " + VERSION + ")",
                        JOptionPane.YES_NO_OPTION);
                if (op == JOptionPane.YES_OPTION) {
                    Desktop.getDesktop().browse(new URI("https://github.com/xFN10x/bedrockR/releases/latest"));
                    System.exit(0);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        // open app
        SwingUtilities.invokeLater(() -> {
            var launch = new RLaunchPage(LAUNCH_WINDOW_SIZE);
            launch.setVisible(true);
            loading.setVisible(false);
        });
    }
}
